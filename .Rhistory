pheno <- read.csv("data/1_QTL_AllFamilies_NoOutlier.csv")
dim(pheno)
head(pheno)
dim(pheno)
n2 <- subset(pheno, !is.na(X15NT1))
n2 <- subset(pheno, !is.na(X15NT1))
hist(n2$X15NT1)
hist(n2$X15NT1, breaks=30)
hist(n2$X15NT1R, breaks=30)
hist(n2$X15NT1, breaks=30)
library(g3tools)
?get_BLUP
pheno <- read.csv("data/1_QTL_AllFamilies_NoOutlier.csv")
dim(pheno)
tail(pheno)
pheno <- read.csv("data/1_QTL_AllFamilies_NoOutlier.csv")
dim(pheno)
head(pheno)
out <- get_BLUP(data = pheno, model = Brix ~ (1 | X15NT1) + (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude) + (1| Line:Longitude) + (1 | Line:Latitude), which.factor = "Line",
outfile = "data/blup.csv")
library("lmer")
library("lme4")
out <- get_BLUP(data = pheno, model = Brix ~ (1 | X15NT1) + (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude) + (1| Line:Longitude) + (1 | Line:Latitude), which.factor = "Line",
outfile = "data/blup.csv")
out <- get_BLUP(data = pheno, model = X15NT1 ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude) + (1| Line:Longitude) + (1 | Line:Latitude), which.factor = "Line",
outfile = "data/blup.csv")
b <- read.csv("data/blup.csv")
dim(b)
head(b)
plot(b$value)
hist(b$value)
hist(b$value, breaks=30)
out
?get_H2
fit <- get_BLUP(data = pheno, model = X15NT1 ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup.csv")
fit
get_H2(fit, numerator="Line",
denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
fit1 <- get_BLUP(data = pheno, model = DT ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup_DT.csv")
get_H2(fit1, numerator="Line",
denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
fit2 <- get_BLUP(data = pheno, model = DPS ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup_DPS.csv")
get_H2(fit2, numerator="Line",
denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
fit3 <- get_BLUP(data = pheno, model = AR ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup_AR.csv")
myp <- subset(pheno, !is.na(AR))
fit3 <- get_BLUP(data = myp, model = AR ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup_AR.csv")
class(myp$AR)
myp$AR
myp <- subset(pheno, !is.na(AR) & AR != "x" & AR != "--")
myp$AR <- as.numeric(as.character(myp$AR))
myp <- subset(pheno, !is.na(AR) & AR != "x" & AR != "--")
myp$AR <- as.numeric(as.character(myp$AR))
fit3 <- get_BLUP(data = myp, model = AR ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup_AR.csv")
get_H2(fit3, numerator="Line",
denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
fit <- get_BLUP(data = pheno, model = X15NT1 ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup.csv")
get_H2(fit, numerator="Line",
denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
fit2 <- get_BLUP(data = pheno, model = X15NT2 ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup_15NT2.csv")
get_H2(fit2, numerator="Line",
denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
fit3 <- get_BLUP(data = pheno, model = X15NT3 ~ (1 | Line) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Line",
outfile = "data/blup_15NT3.csv")
get_H2(fit3, numerator="Line",
denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
?get_BLUP
geno <- read.table("data/Genotypes_filtered_B73_final.txt")
dim(geno)
geno[1:10, 1:10]
geno <- read.table("data/Genotypes_filtered_B73_final.txt", header=TRUE)
geno[1:10, 1:10]
pheno <- read.csv("data/1_QTL_AllFamilies_NoOutlier.csv")
head(pheno)
tail(pheno)
fit <- get_BLUP(data = pheno, model = X15NT1 ~ (1 | Genotype) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Genotype",
outfile = "data/blup_15NT1.csv")
get_H2(fit, numerator="Line", denominator=data.frame(f=c("Line", "Residual"),
df=c(1, 1)))
fit <- get_BLUP(data = pheno, model = X15NT1 ~ (1 | Genotype) + (1 | Rep) + (1 | Longitude)
+ (1 | Latitude), which.factor = "Genotype",
outfile = "data/blup_15NT1.csv")
fit
get_H2(fit, numerator="Line", denominator=data.frame(f=c("Genotype", "Residual"),
df=c(1, 1)))
get_H2(fit, numerator="Genotype", denominator=data.frame(f=c("Genotype", "Residual"),
df=c(1, 1)))
library(rqtl)
install.packages("qtl")
library(qtl)
geno <- read.table("data/Genotypes_filtered_B73_final.txt", header=TRUE)
dim(geno)
geno[1:10, 1:10]
tail(geno[, 1:10])
h <- geno[, 1:3]
names(h) <- c("id", "chr", "pos")
g <- cbind(h, geno[, -1])
head(g[, 1:10])
h$chr <- gsub("S|_.*", "", h$id)
h$pos <- gsub(".*_", "" h$id)
h$pos <- gsub(".*_", "", h$id)
h$pos <- as.numeric(as.character(h$pos))/1000000
g <- cbind(h, geno[, -1])
head(g)
g[g=="U"] <- "-"
g <- data.frame(lapply(g, function(x) {gsub("U", "-", x)}))
head(g)
g <- apply(g, 1, as.character)
g <- cbind(h, geno[, -1])
g <- apply(g, 1, as.character)
g <- data.frame(lapply(g, function(x) {gsub("U", "-", x)}))
head(g)
g <- cbind(h, geno[, -1])
head(g)
?apply
g <- apply(g, 2, as.character)
head(g)
g <- data.frame(lapply(g, function(x) {gsub("U", "-", x)}))
head(g)
g <- cbind(h, apply(geno[, -1], 2, as.character))
head(g)
g <- data.frame(lapply(g, function(x) {gsub("U", "-", x)}))
head(g)
tg <- t(g)
dim(tg)
tg[1:10, 1:10]
names(g)[2:3] <- c("", "")
head(g[, 1:10])
?t
tg[1:10, 1:10]
row.names(tg)[2:3] <- c("", "")
tg[1:10, 1:10]
write.table(tg, "cache/geno_B73.csv", sep=",", col.names=FALSE)
p <- read.csv("data/blup_15NT1.csv")
head(p)
names(p)[1:2] <- c("id", "a15NT1")
p$id <- paste0("X", p$id)
head(p)
write.table(p, "cache/pheno_a15NT1.csv", sep=",")
write.table(p, "cache/pheno_a15NT1.csv", sep=",", row.names=FALSE, quote=FALSE)
library(qtl)
?read.cross
d <- read.cross("csvs", dir="cache", "geno_B73.csv", "pheno_a15NT1.csv")
summary(d)
plotPheno(d, pheno.col=1)
plotPheno(d, pheno.col=2)
d <- calc.genoprob(d, step=1)
out.em <- scanone(d)
?scanone
out.em <- scanone(d, pheno.col=2)
summary(out.em)
plot(out.em)
out.hk <- scanone(sug, pheno.col=2, method="hk")
out.hk <- scanone(d, pheno.col=2, method="hk")
plot(out.em, out.hk, col=c("blue", "red"))
head(geno)
library("data.table")
mlm <- fread("largedata/mlm_filter70.txt")
dim(mlm)
head(mlm)
table(trait$SC)
table(mlm$Trait)
ts <- unique(mlm$Trait)
ts
i =1
sub <- subset(mlm, Trait %in% ts[i])
dim(sub)
sub$qval <- p.adjust(sub$p, method ="fdr")
head(sub)
sum(sub$qval < 0.05)
sum(sub$qval < 0.05, na.rm=T)
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < 0.05",
ts[i], sum(sub$qval < 0.05, na.rm=T), nrow(sub)))
}
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < 0.10",
ts[i], sum(sub$qval < 0.05, na.rm=T), nrow(sub)))
}
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < 0.10",
ts[i], sum(sub$qval < 0.10, na.rm=T), nrow(sub)))
}
source("lib/quickMHTplot.R")
# location: 129.186.85.7
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="qval")
source("lib/newpos.R")
# location: 129.186.85.7
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="qval")
########
source("lib/quickMHTplot.R")
source("lib/newpos.R")
# location: 129.186.85.7
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="qval")
head(sub)
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
head(sub)
tail(sub)
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < 0.10",
ts[i], sum(sub$qval < 0.10, na.rm=T), nrow(sub)))
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
# location: 129.186.85.7
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="qval")
head(sub)
class(sub$qval)
sub$log10q <- -log10(sub$qval)
head(sub)
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="log10q")
class(sub)
sub <- as.data.frame(sub)
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="log10q")
abline(h=3, col="red", lty=2)
mlm <- fread("largedata/mlm_filter70.txt", data.table=FALSE)
ts <- unique(mlm$Trait)
out <- list()
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < 0.10",
ts[i], sum(sub$qval < 0.10, na.rm=T), nrow(sub)))
out[[ts[i]]] <- sub
}
sub <- out[['AR']]
head(sub)
sub$log10q <- -log10(sub$qval)
sub <- as.data.frame(sub)
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="log10q")
abline(h=3, col="red", lty=2)
summary(out)
# location: 129.186.85.7
sub <- out[['AR']]
sub$log10p <- -log10(sub$p)
sub <- as.data.frame(sub)
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="log10p")
abline(h=3, col="red", lty=2)
# location: 129.186.85.7
sub <- out[['AR']]
sub$log10p <- -log10(sub$p)
sub <- as.data.frame(sub)
sub <- subset(sub, log10p < 1)
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="log10p")
# location: 129.186.85.7
sub <- out[['AR']]
sub$log10p <- -log10(sub$p)
sub <- as.data.frame(sub)
sub <- subset(sub, log10p > 1)
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL,
col2plot="log10p")
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL, main="AR", ylab="-log10(p-value)",
col2plot="log10p")
#abline(h=3, col="red", lty=2)
names(out)
length(out)
pdf("graphs/mht_plots.pdf", width=10, height=4)
for(j in 1:length(out)){
t <- names(out)[j]
sub <- out[[t]]
sub$log10p <- -log10(sub$p)
sub <- as.data.frame(sub)
sub <- subset(sub, log10p > 1)
quickMHTplot(res=sub, cex=.9, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL, main=t, ylab="-log10(p-value)",
col2plot="log10p")
#abline(h=3, col="red", lty=2)
}
dev.off()
CF = 0.05
out <- list()
cutoff <- c()
i =5
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < [ %s ]",
ts[i], sum(sub$qval < CF, na.rm=T), nrow(sub), CF))
out[[ts[i]]] <- sub
i =6
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < [ %s ]",
ts[i], sum(sub$qval < CF, na.rm=T), nrow(sub), CF))
out[[ts[i]]] <- sub
i =7
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < [ %s ]",
ts[i], sum(sub$qval < CF, na.rm=T), nrow(sub), CF))
out[[ts[i]]] <- sub
sum(sub$qval < CF, na.rm=T) > 0
which.min(sub$qval - CF)
idx <- which.min(sub$qval - CF)
sub[idx,]
idx_cf <- c()
CF = 0.05
out <- list()
idx_cf <- c()
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < [ %s ]",
ts[i], sum(sub$qval < CF, na.rm=T), nrow(sub), CF))
out[[ts[i]]] <- sub
if(sum(sub$qval < CF, na.rm=T) > 0 ){
idx <- which.min( abs(sub$qval - CF))
idx_cf <- c(idx_cf, idx)
}else{
idx_cf <- c(idx_cd, 0)
}
}
CF = 0.05
out <- list()
idx_cf <- c()
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < [ %s ]",
ts[i], sum(sub$qval < CF, na.rm=T), nrow(sub), CF))
out[[ts[i]]] <- sub
if(sum(sub$qval < CF, na.rm=T) > 0 ){
idx <- which.min( abs(sub$qval - CF))
idx_cf <- c(idx_cf, idx)
}else{
idx_cf <- c(idx_cf, 0)
}
}
sub[idx,]
idx_cf
pdf("graphs/mht_plots_fdr0.05.pdf", width=10, height=4)
for(j in 1:length(out)){
t <- names(out)[j]
sub <- out[[t]]
sub$log10p <- -log10(sub$p)
sub <- as.data.frame(sub)
sub <- subset(sub, log10p > 1)
quickMHTplot(res=sub, cex=.6, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL, main=t, ylab="-log10(p-value)",
col2plot="log10p")
if(idx_cf[j] > 0){
abline(h=sub$log10p[idx_cf[j]], col="red", lty=2)
}
}
dev.off()
idx_cf
j
class(idx_cf)
sub$log10p[idx_cf[j]]
abs(sub$qval - CF)
which.min( abs(sub$qval - CF))
out <- list()
idx_cf <- c()
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < [ %s ]",
ts[i], sum(sub$qval < CF, na.rm=T), nrow(sub), CF))
out[[ts[i]]] <- sub
if(sum(sub$qval < CF, na.rm=T) > 0 ){
idx <- which.min( abs(sub$qval - CF))
idx_cf <- c(idx_cf, idx)
}else{
idx_cf <- c(idx_cf, 0)
}
}
idx_cf
pdf("graphs/mht_plots_fdr0.05.pdf", width=10, height=4)
for(j in 1:length(out)){
t <- names(out)[j]
sub <- out[[t]]
sub$log10p <- -log10(sub$p)
if(idx_cf[j] > 0){
mycf <- sub$log10p[idx_cf[j]]
}
sub <- as.data.frame(sub)
sub <- subset(sub, log10p > 1)
quickMHTplot(res=sub, cex=.6, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL, main=t, ylab="-log10(p-value)",
col2plot="log10p")
if(idx_cf[j] > 0){
abline(h=mycf, col="red", lty=2)
}
}
dev.off()
out <- list()
idx_cf <- c()
for(i in 1:length(ts)){
sub <- subset(mlm, Trait %in% ts[i])
sub <- subset(sub, Chr %in% 1:10)
names(sub)[3:4] <- c("chr", "pos")
sub$qval <- p.adjust(sub$p, method ="fdr")
message(sprintf("###>>> trait [ %s ]: [ %s/%s ] qval < [ %s ]",
ts[i], sum(sub$qval < CF, na.rm=T), nrow(sub), CF))
out[[ts[i]]] <- sub
if(sum(sub$qval < CF, na.rm=T) > 0 ){
idx <- which.min( abs(sub$qval - CF))
idx_cf <- c(idx_cf, idx)
}else{
idx_cf <- c(idx_cf, 0)
}
}
########
source("lib/quickMHTplot.R")
source("lib/newpos.R")
# location: 129.186.85.7
pdf("graphs/mht_plots_fdr0.05.pdf", width=10, height=4)
for(j in 1:length(out)){
t <- names(out)[j]
sub <- out[[t]]
sub$log10p <- -log10(sub$p)
if(idx_cf[j] > 0){
mycf <- sub$log10p[idx_cf[j]]
}
sub <- as.data.frame(sub)
sub <- subset(sub, log10p > 1)
quickMHTplot(res=sub, cex=.6, pch=16, col=rep(c("slateblue", "cyan4"), 5),
GAP=5e+06, yaxis=NULL, main=t, ylab="-log10(p-value)",
col2plot="log10p")
if(idx_cf[j] > 0){
abline(h=mycf, col="red", lty=2)
}
}
dev.off()
